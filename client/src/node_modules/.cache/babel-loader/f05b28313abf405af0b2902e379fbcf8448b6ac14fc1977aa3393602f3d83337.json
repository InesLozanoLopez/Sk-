{"ast":null,"code":"import { runnerCreateTrainings } from './apiServices';\nasync function createTraining(trainingsDaysFilteredHolidays, kmsPerDay, distanceRace, longDistance) {\n  if (trainingsDaysFilteredHolidays.length === 0) {\n    console.log('No training days available');\n  }\n  const trainingDate = trainingsDaysFilteredHolidays;\n  let kmToRun = Number(longDistance);\n  const kmToIncrease = kmsPerDay();\n  function increaseKm() {\n    if (kmToRun < Number(distanceRace)) {\n      kmToRun += kmToIncrease;\n    } else {\n      kmToRun = longDistance;\n    }\n  }\n  const copyOfTrainingsDate = [...trainingDate];\n  while (trainingDate.length > 0) {\n    runnerCreateTrainings(copyOfTrainingsDate.shift().toISOString().split('T')[0], kmToRun).then(increaseKm());\n  }\n}\nfunction kmsPerDay(dateRace, longDistance, distanceRace, holidaysFrom, holidaysTo) {\n  const raceDay = new Date(dateRace);\n  const currentDay = new Date();\n  const daysUntilRaceArr = [];\n  while (currentDay <= raceDay) {\n    daysUntilRaceArr.push(new Date(currentDay));\n    currentDay.setDate(currentDay.getDate() + 1);\n  }\n  const kmToIncrease = distanceRace - longDistance;\n  const trainingsDaysFilteredDaysOff = daysUntilRaceArr.filter(day => !daysOff.includes(day.getDay().toString()));\n  trainingsDaysFilteredHolidays = trainingsDaysFilteredDaysOff.filter(day => day < new Date(holidaysFrom) || day > new Date(holidaysTo));\n  const kmPerDay = kmToIncrease / trainingsDaysFilteredHolidays.length;\n  return kmPerDay;\n}\nexport default {\n  createTraining,\n  kmsPerDay\n};","map":{"version":3,"names":["runnerCreateTrainings","createTraining","trainingsDaysFilteredHolidays","kmsPerDay","distanceRace","longDistance","length","console","log","trainingDate","kmToRun","Number","kmToIncrease","increaseKm","copyOfTrainingsDate","shift","toISOString","split","then","dateRace","holidaysFrom","holidaysTo","raceDay","Date","currentDay","daysUntilRaceArr","push","setDate","getDate","trainingsDaysFilteredDaysOff","filter","day","daysOff","includes","getDay","toString","kmPerDay"],"sources":["/Users/ineslozano/Sk-/client/src/functions.js"],"sourcesContent":["import { runnerCreateTrainings } from './apiServices';\n\nasync function createTraining(trainingsDaysFilteredHolidays, kmsPerDay, distanceRace, longDistance) {\n  if (trainingsDaysFilteredHolidays.length === 0) {\n    console.log('No training days available')\n  }\n  const trainingDate = trainingsDaysFilteredHolidays;\n  let kmToRun = Number(longDistance);\n  const kmToIncrease = kmsPerDay()\n\n  function increaseKm() {\n    if (kmToRun < Number(distanceRace)) {\n      kmToRun += kmToIncrease\n    } else {\n      kmToRun = longDistance;\n    }\n  }\n  const copyOfTrainingsDate = [...trainingDate]\n\n  while (trainingDate.length > 0) {\n    runnerCreateTrainings(copyOfTrainingsDate.shift().toISOString().split('T')[0], kmToRun)\n      .then(increaseKm())\n  }\n}\n\nfunction kmsPerDay(dateRace,longDistance, distanceRace, holidaysFrom, holidaysTo) {\n    const raceDay = new Date(dateRace);\n    const currentDay = new Date();\n    const daysUntilRaceArr = [];\n\n    while (currentDay <= raceDay) {\n      daysUntilRaceArr.push(new Date(currentDay));\n      currentDay.setDate(currentDay.getDate() + 1);\n    }\n\n    const kmToIncrease = distanceRace - longDistance;\n    const trainingsDaysFilteredDaysOff = daysUntilRaceArr.filter((day) => !daysOff.includes(day.getDay().toString()));\n\n    trainingsDaysFilteredHolidays = trainingsDaysFilteredDaysOff.filter((day) => day < new Date(holidaysFrom) || day > new Date(holidaysTo));\n    const kmPerDay = kmToIncrease / trainingsDaysFilteredHolidays.length;\n\n    return kmPerDay;\n  }\n\nexport default {createTraining, kmsPerDay}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,eAAe;AAErD,eAAeC,cAAcA,CAACC,6BAA6B,EAAEC,SAAS,EAAEC,YAAY,EAAEC,YAAY,EAAE;EAClG,IAAIH,6BAA6B,CAACI,MAAM,KAAK,CAAC,EAAE;IAC9CC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C;EACA,MAAMC,YAAY,GAAGP,6BAA6B;EAClD,IAAIQ,OAAO,GAAGC,MAAM,CAACN,YAAY,CAAC;EAClC,MAAMO,YAAY,GAAGT,SAAS,CAAC,CAAC;EAEhC,SAASU,UAAUA,CAAA,EAAG;IACpB,IAAIH,OAAO,GAAGC,MAAM,CAACP,YAAY,CAAC,EAAE;MAClCM,OAAO,IAAIE,YAAY;IACzB,CAAC,MAAM;MACLF,OAAO,GAAGL,YAAY;IACxB;EACF;EACA,MAAMS,mBAAmB,GAAG,CAAC,GAAGL,YAAY,CAAC;EAE7C,OAAOA,YAAY,CAACH,MAAM,GAAG,CAAC,EAAE;IAC9BN,qBAAqB,CAACc,mBAAmB,CAACC,KAAK,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEP,OAAO,CAAC,CACpFQ,IAAI,CAACL,UAAU,CAAC,CAAC,CAAC;EACvB;AACF;AAEA,SAASV,SAASA,CAACgB,QAAQ,EAACd,YAAY,EAAED,YAAY,EAAEgB,YAAY,EAAEC,UAAU,EAAE;EAC9E,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACJ,QAAQ,CAAC;EAClC,MAAMK,UAAU,GAAG,IAAID,IAAI,CAAC,CAAC;EAC7B,MAAME,gBAAgB,GAAG,EAAE;EAE3B,OAAOD,UAAU,IAAIF,OAAO,EAAE;IAC5BG,gBAAgB,CAACC,IAAI,CAAC,IAAIH,IAAI,CAACC,UAAU,CAAC,CAAC;IAC3CA,UAAU,CAACG,OAAO,CAACH,UAAU,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EAC9C;EAEA,MAAMhB,YAAY,GAAGR,YAAY,GAAGC,YAAY;EAChD,MAAMwB,4BAA4B,GAAGJ,gBAAgB,CAACK,MAAM,CAAEC,GAAG,IAAK,CAACC,OAAO,CAACC,QAAQ,CAACF,GAAG,CAACG,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEjHjC,6BAA6B,GAAG2B,4BAA4B,CAACC,MAAM,CAAEC,GAAG,IAAKA,GAAG,GAAG,IAAIR,IAAI,CAACH,YAAY,CAAC,IAAIW,GAAG,GAAG,IAAIR,IAAI,CAACF,UAAU,CAAC,CAAC;EACxI,MAAMe,QAAQ,GAAGxB,YAAY,GAAGV,6BAA6B,CAACI,MAAM;EAEpE,OAAO8B,QAAQ;AACjB;AAEF,eAAe;EAACnC,cAAc;EAAEE;AAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}