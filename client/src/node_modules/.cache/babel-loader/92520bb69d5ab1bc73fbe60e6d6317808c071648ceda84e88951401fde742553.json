{"ast":null,"code":"const baseURL = 'http://localhost:3001';\nexports.newRunner = async (runnerName, _ref, _ref2, _ref3) => {\n  let {\n    race\n  } = _ref;\n  let {\n    currentValues\n  } = _ref2;\n  let {\n    trainingAvailability\n  } = _ref3;\n  try {\n    const newRunner = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: runnerName,\n        race: {\n          race\n        },\n        currentValues: {\n          currentValues\n        },\n        trainingAvailability: {\n          trainingAvailability\n        }\n      })\n    };\n    const runner = await fetch(baseURL + '/runner', newRunner);\n    const data = await runner.json();\n    return data;\n  } catch (e) {\n    console.log('Error from apiServices', e);\n  }\n};\nexports.getRunnerInfo = async () => {\n  try {\n    const getInfo = await fetch(baseURL + `/runner`);\n    const data = await getInfo.json();\n    return data;\n  } catch (e) {\n    console.log('Error from ApiServices', e);\n  }\n};\nexports.runnerTrainings = async training => {\n  try {\n    const trainingProfile = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        training\n      })\n    };\n    const trainingCreated = await fetch(baseURL + '/training', trainingProfile);\n    const data = await trainingCreated.json();\n    return data;\n  } catch (e) {\n    console.log('Error from ApiServices', e);\n  }\n};\nexports.runnerTrainings = async () => {\n  try {\n    const trainings = await fetch(baseURL + `/training`);\n    console.log('trainings', trainings);\n    const data = await trainings.json();\n    console.log('data', data);\n    return data;\n  } catch (e) {\n    console.log('Error from ApiServices', e);\n  }\n};","map":{"version":3,"names":["baseURL","exports","newRunner","runnerName","_ref","_ref2","_ref3","race","currentValues","trainingAvailability","method","headers","body","JSON","stringify","name","runner","fetch","data","json","e","console","log","getRunnerInfo","getInfo","runnerTrainings","training","trainingProfile","trainingCreated","trainings"],"sources":["/Users/ineslozano/Sk-/client/src/apiServices.js"],"sourcesContent":["const baseURL = 'http://localhost:3001'\n\nexports.newRunner = async (runnerName, {race}, {currentValues}, {trainingAvailability}) => {\n    try{\n    const newRunner = {\n        method: 'POST',\n        headers: {'Content-Type' : 'application/json'},\n        body: JSON.stringify({name: runnerName, race: {race}, currentValues:{currentValues}, trainingAvailability:{trainingAvailability}})\n    }\n    const runner = await fetch(baseURL + '/runner', newRunner);\n    const data = await runner.json();\n    return data;\n    }catch(e){\n        console.log('Error from apiServices', e)\n    }\n}\n\nexports.getRunnerInfo = async () => {\n    try{\n        const getInfo = await fetch(baseURL + `/runner`);\n        const data = await getInfo.json();\n        return data;\n        \n    }catch(e){\n        console.log('Error from ApiServices', e)\n    }\n}\n\nexports.runnerTrainings = async (training) =>{\n    try{\n        const trainingProfile = {\n            method: 'POST',\n            headers: {'Content-Type' :'application/json'},\n            body: JSON.stringify({training})\n        }\n        const trainingCreated = await fetch(baseURL + '/training', trainingProfile);\n        const data = await trainingCreated.json();\n        return data;\n\n    }catch(e){\n        console.log('Error from ApiServices', e)\n    }\n}\n\nexports.runnerTrainings = async () => {\n    try{\n        const trainings = await fetch(baseURL + `/training`);\n        console.log('trainings', trainings)\n        const data = await trainings.json();\n        console.log('data', data)\n\n        return data;\n        \n    }catch(e){\n        console.log('Error from ApiServices', e)\n    }\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvCC,OAAO,CAACC,SAAS,GAAG,OAAOC,UAAU,EAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA,KAAsD;EAAA,IAApD;IAACC;EAAI,CAAC,GAAAH,IAAA;EAAA,IAAE;IAACI;EAAa,CAAC,GAAAH,KAAA;EAAA,IAAE;IAACI;EAAoB,CAAC,GAAAH,KAAA;EAClF,IAAG;IACH,MAAMJ,SAAS,GAAG;MACdQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAG;MAAkB,CAAC;MAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACC,IAAI,EAAEZ,UAAU;QAAEI,IAAI,EAAE;UAACA;QAAI,CAAC;QAAEC,aAAa,EAAC;UAACA;QAAa,CAAC;QAAEC,oBAAoB,EAAC;UAACA;QAAoB;MAAC,CAAC;IACrI,CAAC;IACD,MAAMO,MAAM,GAAG,MAAMC,KAAK,CAACjB,OAAO,GAAG,SAAS,EAAEE,SAAS,CAAC;IAC1D,MAAMgB,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAI,CAAC,CAAC;IAChC,OAAOD,IAAI;EACX,CAAC,QAAME,CAAC,EAAC;IACLC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,CAAC,CAAC;EAC5C;AACJ,CAAC;AAEDnB,OAAO,CAACsB,aAAa,GAAG,YAAY;EAChC,IAAG;IACC,MAAMC,OAAO,GAAG,MAAMP,KAAK,CAACjB,OAAO,GAAI,SAAQ,CAAC;IAChD,MAAMkB,IAAI,GAAG,MAAMM,OAAO,CAACL,IAAI,CAAC,CAAC;IACjC,OAAOD,IAAI;EAEf,CAAC,QAAME,CAAC,EAAC;IACLC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,CAAC,CAAC;EAC5C;AACJ,CAAC;AAEDnB,OAAO,CAACwB,eAAe,GAAG,MAAOC,QAAQ,IAAI;EACzC,IAAG;IACC,MAAMC,eAAe,GAAG;MACpBjB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACY;MAAQ,CAAC;IACnC,CAAC;IACD,MAAME,eAAe,GAAG,MAAMX,KAAK,CAACjB,OAAO,GAAG,WAAW,EAAE2B,eAAe,CAAC;IAC3E,MAAMT,IAAI,GAAG,MAAMU,eAAe,CAACT,IAAI,CAAC,CAAC;IACzC,OAAOD,IAAI;EAEf,CAAC,QAAME,CAAC,EAAC;IACLC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,CAAC,CAAC;EAC5C;AACJ,CAAC;AAEDnB,OAAO,CAACwB,eAAe,GAAG,YAAY;EAClC,IAAG;IACC,MAAMI,SAAS,GAAG,MAAMZ,KAAK,CAACjB,OAAO,GAAI,WAAU,CAAC;IACpDqB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEO,SAAS,CAAC;IACnC,MAAMX,IAAI,GAAG,MAAMW,SAAS,CAACV,IAAI,CAAC,CAAC;IACnCE,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC;IAEzB,OAAOA,IAAI;EAEf,CAAC,QAAME,CAAC,EAAC;IACLC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,CAAC,CAAC;EAC5C;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}